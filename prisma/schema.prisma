generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Family {
  id    Int    @id @default(autoincrement())
  name  String @unique
  fonts Font[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  fonts Font[]
}

model Kind {
  id    Int    @id @default(autoincrement())
  name  String @unique
  fonts Font[]
}

model Font {
  id         Int       @id @default(autoincrement())
  familyId   Int
  categoryId Int
  kindId     Int
  subsets    String[]
  category   Category  @relation(fields: [categoryId], references: [id])
  family     Family    @relation(fields: [familyId], references: [id])
  kind       Kind      @relation(fields: [kindId], references: [id])
  variants   Variant[]

  @@unique([familyId, categoryId, kindId], map: "Font_familyId_categoryId_kindId_unique")
}

model Variant {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String?
  fontId   Int
  style    String
  weight   String
  fontUrl  String
  font     Font    @relation(fields: [fontId], references: [id])

  @@unique([fontId, style, weight], map: "Variant_fontId_style_weight_unique")
}

model Design {
  id           String   @id @default(uuid())
  name         String
  userId       String
  canvasWidth  Int
  canvasHeight Int
  background   String
  elements     String
  fonts        String[]
  thumbnail    String   @default("")
  groups       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  templateId   String?
  template     Template? @relation(fields: [templateId], references: [id])
  thumbnail_pending Boolean  @default(true)

  @@index([thumbnail_pending])
  @@map("designs")
}

model BlockCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  blocks    Block[]

  @@map("block_categories")
}

model Block {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  elements   String
  url        String
  categoryId Int
  category   BlockCategory @relation(fields: [categoryId], references: [id])

  @@map("blocks")
}

model uploads {
  id                Int      @id @default(autoincrement())
  url               String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  userId            String
  publicId          String
  backgroundRemoved Boolean  @default(false)
}

model Template {
  id           String   @id @default(uuid())
  name         String
  userId       String
  canvasWidth  Int
  canvasHeight Int
  background   String
  elements     String
  fonts        String[]
  thumbnail    String   @default("")
  groups       String
  tags         String[]
  createdAt    DateTime @default(now())
  useCount     Int      @default(0)
  designs      Design[]

  @@index([tags])
  @@map("templates")
}

model SvgIcon {
  id         String   @id @default(uuid())
  query      String
  page       Int
  iconData   Json
  createdAt  DateTime @default(now())
  
  @@unique([query, page])
  @@map("svg_icons")
}
